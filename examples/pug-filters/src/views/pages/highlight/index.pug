extends Views/layouts/default.pug

include Views/mixins/code.pug

//- set variables used in layout
block variables
  - const title = ':highlight'

//- add page specifically styles
append style
  link(rel='stylesheet' href=require('./styles.scss'))

//- add page specifically scripts
append script
  script(src=require('./main'))

block content
  section
    .container
      p The #[:code :highlight] filter highlights code syntax.

  section
    .container
      h2 Enable filter

      p.
        The #[:code :highlight] filter require a highlighting module.<br>
        Currently is supported the #[a(href="https://prismjs.com") prismjs] module,
        the #[a(href="https://highlightjs.org") highlight.js] will be added later.<br>

      p Why is #[:code prismjs] supported in the first place?
      ul
        li.
          the #[:code prismjs] support 291 languages, the #[:code highlight.js] support only 197 languages
        li.
          the #[:code prismjs] support the #[:code pug] "from box",
          but the #[:code highlight.js] require an additional "third-party" plugin for pug
        li.
          the #[:code prismjs] package size is only 2 MB, the #[:code highlight.js] is 3.7 MB

      div By usage the #[:code :highlight] filter install the npm module:
      +code npm install -D prismjs

      p Defaults, the filter is disabled. If this filter is used, it must be enabled in #[:code webpack.config.js].

      div Use the Pug loader options in the webpack config:
      +code: :highlight(js)
        {
          test: /\.pug$/,
          loader: '@webdiscus/pug-loader',
          options: {
            // enable embedded filters
            embedFilters: {
              // enable :highlight filter
              highlight: {
                verbose: true,
                use: 'prismjs',
              },
            },
          },
        },

      p The filter options:
      ul
        li #[:code verbose {boolean}] Enable output process info in console. Use it in #[:code development] mode only. Defaults is #[:code false].<br>
        li.
          #[:code use {string}] The name of a highlighting npm module. The module must be installed.
          Currently, is supported the #[a(href="https://prismjs.com") prismjs] only.

  section
    .container
      h2 Tipps

      h3 Inline nested tags

      div.
        Pug has inline syntax. Nested tags can be inlined with #[:code : ] at the end of each previous inline element.<br>
        For example, following nested #[:code pre] and #[:code code] tags:
      +code: :highlight(pug)
        pre.language-pug
          code
            p Hello Pug!

      div can be inlined:
      +code: :highlight(pug)
        pre.language-pug: code
          p Hello Pug!

      h3 Use mixins

      div You can create the #[:code mixin code] for the #[:code pre] and  #[:code code] tags:
      +code: :highlight(pug)
        mixin code
          pre.language-: code
            block

      div Then use the mixin and filter easily in same line:
      +code: :highlight(pug)
        +code: :highlight(js)
          const arr = [1, 2, 'banana'];

      b Result:
      +code: :highlight(js)
        const arr = [1, 2, 'banana'];

      h3 Highlight a file

      div.
        For a large code example, it is recommended to save that code in a separate file and then include it.

      +code: :highlight(pug)
        +code: include:highlight(pug) code-example.pug

  section
    .container
      h2 Highlight an inline code

      div Use the nested inline filters: #[:code #&lbrack;:code:highlight(lang) ...&rbrack;].

      p.
        #[b Note:]
        For usage the #[:code &lbrack;] and #[:code &rbrack;] chars in pug inline filter,
        the chars must be encoded with their corresponding HTML entities #[:code:escape &lbrack;] and #[:code:escape &rbrack;]

      p For example:

      p.
        Pug: #[:code #&lbrack;:code:highlight(js) obj = { arr: &amp;lbrack;1, 2, 'banana'&amp;rbrack; };&rbrack;]<br>
        #[b Result:] #[:code:highlight(js) const obj = { arr: &lbrack;1, 2, 'banana'&rbrack; };]

      p.
        Pug: #[:code #&lbrack;:code:highlight(html) &lt;div class="container"&gt;content&lt;/div&gt;&rbrack;]<br>
        #[b Result:] #[:code:highlight(html) <div class="container">content</div>]

  section
    .container
      h2 Highlight a code block

      p.
        To highlight the code syntax of a language use the #[:code :highlight(lang)] filter,
        where the #[:code lang] is a language supported by a highlight module.<br>
        #[b Note:] A highlight module may require a specific class name by the #[:code:escape <pre>] tag.<br>
        E.g. the #[:code prismjs] themes needs #[:code:escape <pre class="language-">] for a background color.

      div For example, highlight the #[:code html] code:
      +code: :highlight(pug)
        pre.language-: code: :highlight(html)
          <!-- Comment -->
          <div class="container">
            <p>Paragraph</p>
            <script>
              const body = document.querySelector("body");
            </script>
          </div>

      b Result:
      pre.language-: code: :highlight(html)
        <!-- Comment -->
        <div class="container">
          <p>Paragraph</p>
          <script>
            const body = document.querySelector("body");
          </script>
        </div>

  section
    .container
      h2 Highlight a code in markdown

      div.
        The embedded #[:code :markdown] filter can self highlight code blocks.<br>
        How to enable and configure this filter see the #[a(href="markdown.html") :markdown] page.

      div Usage example:
      +code: :highlight(pug)
        :markdown
          _HTML_
          ```html
          <!-- Comment -->
          <div class="container">
            <p>Paragraph</p>
          </div>
          ```

          _JavaScript_
          ```js
          const arr = [1, 2, 'banana'];
          ```

      b Result:
      :markdown
        _HTML_
        ```html
        <!-- Comment -->
        <div class="container">
          <p>Paragraph</p>
        </div>
        ```
        _JavaScript_
        ```js
        const arr = [1, 2, 'banana'];
        ```

      h3 ⚠️ Old way (not recommended!)

      p.
        Usage of the #[:code jstransformer-markdown-it] npm module as #[:code :markdown-it] filter is not recommended.
        This filter is no longer maintained and contains an outdated version of #[:code markdown-it]
        module with #[a(href="https://github.com/jstransformers/jstransformer-markdown-it/issues/31") security vulnerabilities].

      p.
        To highlight a markdown use the nested filters #[:code :highlight:markdown-it].
        All code blocks in markdown will be automatically highlighted by a language defined at a code block.

      div Usage example:
      +code: :highlight(pug)
        :highlight:markdown-it
          ```html
          <p>Paragraph</p>
          ```

          ```js
          const arr = [1, 2, 'banana'];
          ```
